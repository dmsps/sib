{"version":3,"sources":["grid/gridActions.js","grid/gridReducer.js","app/store.js","grid/Grid.js","app/App.js","serviceWorker.js","index.js"],"names":["ADD_ROW","REMOVE_ROW","EDIT_FILM","actions","newFilm","type","deleteFilm","id","payload","editFilm","data","Math","floor","random","title","country","date","description","budjet","price","genre","films","filter","item","map","Object","assign","gridReducer","state","arguments","length","undefined","action","concat","toConsumableArray","store","createStore","applyMiddleware","apply","Grid","_Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","colDefs","headerName","field","cellEditor","cellEditorParams","values","newRow","editRow","deleteRow","inherits","createClass","key","value","_this2","react_default","a","createElement","Fragment","onClick","className","style","height","width","main","defaultColDef","editable","columnDefs","rowData","singleClickEdit","onGridReady","params","gridApi","api","sizeColumnsToFit","onCellValueChanged","Component","connect","dispatch","bindActionCreators","forwardRef","App","grid_Grid","Boolean","window","location","hostname","match","ReactDOM","render","es","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd9d771e.chunk.js","sourcesContent":["export const ADD_ROW = \"ADD_ROW\";\r\nexport const REMOVE_ROW = \"REMOVE_ROW\";\r\nexport const EDIT_FILM = \"EDIT_FILM\";\r\n\r\nexport const actions = {\r\n  newFilm() {\r\n    return {\r\n      type: ADD_ROW\r\n    };\r\n  },\r\n  deleteFilm(id) {\r\n    return {\r\n      type: REMOVE_ROW,\r\n      payload: { id }\r\n    };\r\n  },\r\n  editFilm(data) {\r\n    return {\r\n      type: EDIT_FILM,\r\n      payload: { data }\r\n    };\r\n  }\r\n};\r\n","import { ADD_ROW, REMOVE_ROW, EDIT_FILM } from \"./gridActions\";\r\n\r\nfunction gridReducer(state = {}, action) {\r\n  const payload = action.payload;\r\n  switch (action.type) {\r\n    case ADD_ROW:\r\n      return {\r\n        films: [...state.films, newFilm()]\r\n      };\r\n    case REMOVE_ROW:\r\n      return {\r\n        films: deleteFilm(state.films, payload.id)\r\n      };\r\n    case EDIT_FILM:\r\n      return {\r\n        films: editFilm(state.films, payload.data)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst newFilm = () => {\r\n  return {\r\n    id: Math.floor(1 + Math.random() * 100),\r\n    title: \"Название\",\r\n    country: \"Страна\",\r\n    date: \"Дата\",\r\n    description: \"Описание\",\r\n    budjet: \"Бюджет\",\r\n    price: \"Цена\",\r\n    genre: \"Жанр\"\r\n  };\r\n};\r\n\r\nconst deleteFilm = (films, id) => films.filter(item => item.id !== id);\r\n\r\nconst editFilm = (films, data) =>\r\n  films.map(item => {\r\n    if (item.id === data.id) {\r\n      return Object.assign(item, data);\r\n    }\r\n    return item;\r\n  });\r\n\r\nexport default gridReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport gridReducer from \"../grid/gridReducer\";\r\n\r\nconst middleware = [];\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middleware.push(logger);\r\n}\r\n\r\nconst initialState = {\r\n  films: [\r\n    {\r\n      id: 1,\r\n      title: \"Звёздные войны: Эпизод 1 – Скрытая угроза\",\r\n      country: \"США\",\r\n      date: \"1999\",\r\n      description: \"«У каждой саги есть начало»\",\r\n      budjet: \"$115 000 000\",\r\n      price: \"$10\",\r\n      genre: \"Фантастика\"\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Звёздные войны: Эпизод 2 – Атака клонов\",\r\n      country: \"США\",\r\n      date: \"2002\",\r\n      description: \"«Size matters not. Except on an IMAX Screen»\",\r\n      budjet: \"$115 000 000\",\r\n      price: \"$10\",\r\n      genre: \"Фантастика\"\r\n    }\r\n  ]\r\n};\r\n\r\nexport const store = createStore(\r\n  gridReducer,\r\n  initialState,\r\n  applyMiddleware(...middleware)\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { actions } from \"./gridActions\";\r\n\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\r\n\r\nexport class Grid extends Component {\r\n  constructor(props) {\r\n    super();\r\n  }\r\n\r\n  colDefs = [\r\n    { headerName: \"Название\", field: \"title\" },\r\n    {\r\n      headerName: \"Страна\",\r\n      field: \"country\",\r\n      cellEditor: \"agSelectCellEditor\",\r\n      cellEditorParams: {\r\n        values: [\"США\", \"Англия\", \"Испания\", \"Франция\", \"Португалия\"]\r\n      }\r\n    },\r\n    { headerName: \"Дата выхода\", field: \"date\" },\r\n    { headerName: \"Описание\", field: \"description\" },\r\n    { headerName: \"Бюджет\", field: \"budjet\" },\r\n    { headerName: \"Цена за просмотр\", field: \"price\" },\r\n    {\r\n      headerName: \"Жанр\",\r\n      field: \"genre\",\r\n      cellEditor: \"agSelectCellEditor\",\r\n      cellEditorParams: {\r\n        values: [\"Фантастика\", \"Триллер\", \"Комедия\", \"Драма\"]\r\n      }\r\n    }\r\n  ];\r\n\r\n  newRow = () => {\r\n    this.props.actions.newFilm();\r\n  };\r\n\r\n  editRow = data => {\r\n    this.props.actions.editFilm(data);\r\n  };\r\n\r\n  deleteRow = id => {\r\n    this.props.actions.deleteFilm(id);\r\n  };\r\n\r\n  render() {\r\n    const { films } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <button onClick={() => this.newRow()} type=\"button\">\r\n          Добавить\r\n        </button>\r\n        {films.length > 0 && (\r\n          <button\r\n            onClick={() => this.deleteRow(films[films.length - 1].id)}\r\n            type=\"button\"\r\n          >\r\n            Удалить\r\n          </button>\r\n        )}\r\n        <div\r\n          className=\"ag-theme-balham\"\r\n          style={{\r\n            height: \"90vh\",\r\n            width: \"100%\"\r\n          }}\r\n        >\r\n          <AgGridReact\r\n            defaultColDef={{ editable: true }}\r\n            columnDefs={this.colDefs}\r\n            rowData={this.props.films}\r\n            singleClickEdit={true}\r\n            onGridReady={params => {\r\n              this.gridApi = params.api;\r\n              this.gridApi.sizeColumnsToFit();\r\n            }}\r\n            onCellValueChanged={params => {\r\n              this.editRow(params.data);\r\n            }}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    films: state.films\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    actions: bindActionCreators(actions, dispatch)\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  null,\r\n  { forwardRef: true }\r\n)(Grid);\r\n","import React from \"react\";\r\n\r\nimport Grid from \"../grid/Grid\";\r\n\r\nconst App = () => <Grid />;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport { store } from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}